//
//  BleGattClient.swift
//
//  BlueJinja Stub code for iOS
//  This code was generated by BlueJinja
//

import Foundation
import CoreBluetooth

class BleGattClient: NSObject, CBPeripheralDelegate {
    
    // MARK: All service UUIDs
    let serviceUuids = [
    {%- for service in client_services_conf -%}
    BleService{{ service }}.serviceUuid{% if not loop.last %}, {% endif %}{% endfor -%}
    ]
    
    // Services in profile
    {%- for service in client_services_conf %}
    let bleService{{ service }}: BleService{{ service }}
    private let delegate{{ service }}: BleGattClientDelegate
    {%- endfor %}
    
    // MARK: - Init
    override init() {
        {%- for service in client_services_conf %}
        bleService{{ service }} = BleService{{ service }}()
        delegate{{ service }} = bleService{{ service }}
        {%- endfor %}
        super.init()
    }
    
    // On discover services (Implemented exclusively for one service)
    func peripheral(_ peripheral: CBPeripheral, didDiscoverServices error: Error?) {
        if error == nil {
            if let services = peripheral.services {
                for service in services {
                    // Distribute the service
                    switch service.uuid {
                    {% for service in client_services_conf -%}
                    case BleService{{ service }}.serviceUuid:
                        delegate{{ service }}.peripheral(peripheral, didDiscoverService: service, error: error)
                        break
                    {% endfor -%}
                    default:
                        break
                    }
                }
            }
        } else {
        }
    }
    
    // On discover characteristics of servise
    func peripheral(_ peripheral: CBPeripheral, didDiscoverCharacteristicsFor service: CBService, error: Error?) {
        if error == nil {
            // Distribute the service
            switch service.uuid {
            {% for service in client_services_conf -%}
            case BleService{{ service }}.serviceUuid:
                delegate{{ service }}.peripheral(peripheral, didDiscoverCharacteristicsFor: service, error: error)
                break
            {% endfor -%}
            default:
                break
            }
        } else {
        }
    }
    
    // On notify from characteristic
    func peripheral(_ peripheral: CBPeripheral, didUpdateValueFor characteristic: CBCharacteristic, error: Error?) {
        if error == nil {
            if let service = characteristic.service {
                // Distribute the service
                switch service.uuid {
                {% for service in client_services_conf -%}
                case BleService{{ service }}.serviceUuid:
                    delegate{{ service }}.peripheral(peripheral, didUpdateValueFor: characteristic, error: error)
                    break
                {% endfor -%}
                default:
                    break
                }
            }
        } else {
        }
    }
    
}
