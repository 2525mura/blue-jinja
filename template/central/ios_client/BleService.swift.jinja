//
//  BleService{{ service_conf.name }}.swift
//
//  BlueJinja Stub code for iOS
//  This code was generated by BlueJinja
//

import Foundation
import Combine
import CoreBluetooth

class BleService{{ service_conf.name }}: BleGattClientDelegate {

    // MARK: ESP32 Ble UUID
    static let serviceUuid = CBUUID(string: "{{ service_conf.uuid }}")
    {# Characteristic uuids #}
    {% for characteristic in characteristics_conf -%}
    static private let characteristic{{ characteristic.name }}Uuid = CBUUID(string: "{{ characteristic.uuid }}")
    {% endfor -%}

    private var characteristicUuids: [CBUUID] = [
    {%- for characteristic in characteristics_conf -%}
    characteristic{{ characteristic.name }}Uuid{% if not loop.last %}, {% endif %}{% endfor -%}
    ]
    
    // A service and characteristics
    private var cbService: CBService?
    {# Characteristic objects #}
    {% for characteristic in characteristics_conf -%}
    private var cbCharacteristic{{ characteristic.name }}: CBCharacteristic?
    {% endfor -%}

    public var delegate: BleService{{ service_conf.name }}Delegate? = nil
    
    // MARK: - Init
    init() {
    }
    
    // On discover servises (Implemented exclusively for one service)
    func peripheral(_ peripheral: CBPeripheral, didDiscoverService service: CBService, error: Error?) {
        if error == nil {
            // Set member variable of Service. And discover the specified Characteristic from this service
            cbService = service
            peripheral.discoverCharacteristics(characteristicUuids, for: service)
            print("Discoverd Service \"{{ service_conf.name }}\"")
        } else {
        }
    }
    
    // On discover characteristics of service
    func peripheral(_ peripheral: CBPeripheral, didDiscoverCharacteristicsFor service: CBService, error: Error?) {
        if error == nil {
            if let characteristics = service.characteristics {
                for characteristic in characteristics {
                    // Set each member variable of Characteristic. And allow notifications
                    switch characteristic.uuid {
                    {% for characteristic in characteristics_conf -%}
                    case BleService{{ service_conf.name }}.characteristic{{ characteristic.name }}Uuid:
                        cbCharacteristic{{ characteristic.name }} = characteristic
                        peripheral.setNotifyValue(true, for: characteristic)
                        break
                    {% endfor -%}
                    default:
                        break
                    }
                    print("Discoverd Characteristics")
                }
            }
        } else {
            
        }
    }
    
    // On notify from peripheral
    func peripheral(_ peripheral: CBPeripheral, didUpdateValueFor characteristic: CBCharacteristic, error: Error?) {
        if error == nil {
            guard let data = characteristic.value else {
                return
            }
            guard let recvDelegate = delegate else {
                return
            }
            
            // Distribute call functions based on characteristic UUID
            switch characteristic.uuid {
            {% for characteristic in characteristics_conf -%}
            case BleService{{ service_conf.name }}.characteristic{{ characteristic.name }}Uuid:
                {%- if characteristic.args.type_fixed=='String' %}
                recvDelegate.onRecv{{ characteristic.name }}({{ characteristic.args.names[0] }}: String(data: data, encoding: .ascii)!);
                {%- else %}
                let buff = data.array{{ characteristic.args.type_fixed }}
                recvDelegate.onRecv{{ characteristic.name }}({%- for arg_name in characteristic.args.names -%}
                {{ arg_name }}: buff[{{ loop.index-1 }}]{% if not loop.last %}, {% endif %}{% endfor %})
                {%- endif %}
                break
            {% endfor -%}
            default:
                break
            }
            
        } else {
            
        }
    }

    {########################################################
            Stub send functions    sendFoo(typename var)
    #########################################################}
    {%- for characteristic in characteristics_conf -%}
    {% if characteristic.direction=='CtoP' or characteristic.direction=='BIDI' -%}
    // send {{ characteristic.name }} to peripheral
    func send{% include 'template/swift_stub_func.jinja' %} {
        {%- if characteristic.args.type_fixed=='String' %}
        guard let data = {{ characteristic.args.names[0] }}.data(using: .ascii) else {
            return
        }
        if let peripheral = cbService?.peripheral {
            if let characteristic = cbCharacteristic{{ characteristic.name }} {
                peripheral.writeValue(data, for: characteristic, type: .withResponse)
            }
        }
        {%- else %}
        let buff: [{{ characteristic.args.type_fixed }}] = [
        {%- for arg_name in characteristic.args.names -%}
        {{ arg_name }}{% if not loop.last %}, {% endif %}{% endfor -%}
        ]
        if let peripheral = cbService?.peripheral {
            if let characteristic = cbCharacteristic{{ characteristic.name }} {
                peripheral.writeValue(buff.data, for: characteristic, type: .withResponse)
            }
        }
        {%- endif %}
    }
    {% endif -%}
    {% endfor %}
}
