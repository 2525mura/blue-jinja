/**
 * This code was generated by BlueJinja
 *
 */

#include <memory>
#include <BLEService.h>
#include <BLECharacteristic.h>
#include <BLE2902.h>
#include "CharacteristicCallbacker.h"
#include "BLEService{{ service_conf.name }}Delegate.h"

#ifndef __BLE_SERVICE_{{ service_conf.name | upper() }}_H__
#define __BLE_SERVICE_{{ service_conf.name | upper() }}_H__

class BLEService{{ service_conf.name }} {
public:
    BLEService{{ service_conf.name }}(std::unique_ptr<BLEService> pService);
    void setDelegate(BLEService{{ service_conf.name }}Delegate* delegate);
    void startService();
    {% for characteristic in characteristics_conf -%}
    {% if characteristic.direction=='PtoC' or characteristic.direction=='BIDI' -%}
    void send{% include 'template/peripheral/c_stub_func.jinja' %};
    {% endif -%}
    {% endfor %}
private:
    std::unique_ptr<BLEService{{ service_conf.name }}Delegate> delegate_;
    std::unique_ptr<BLEService> pService_;
    std::shared_ptr<BLE2902> pBLE2902_;
{# Characteristic objects #}
    {% for characteristic in characteristics_conf -%}
    std::unique_ptr<BLECharacteristic> pCharacteristic{{ characteristic.name }}_;
    {% endfor -%}
{# Callback Function objects #}
    {%- for characteristic in characteristics_conf -%}
    {%- if characteristic.direction=='CtoP' or characteristic.direction=='BIDI' %}
    CharacteristicCallbacker cbRecv{{ characteristic.name }}_;
    {%- endif %}
    {%- endfor %}

}; // BLEService{{ service_conf.name }}

#endif __BLE_SERVICE_{{ service_conf.name | upper() }}_H__
