/**
 * This code was generated by BlueJinja
 *
 */

#include "BLEService{{ service_conf.name }}.h"

BLEService{{ service_conf.name }}::BLEService{{ service_conf.name }}(std::unique_ptr<BLEService> pService) :
    pService_(std::move(pService)),
    pBLE2902_(new BLE2902())
{
    // Create BLE Characteristics
    {% for characteristic in characteristics_conf -%}
    // {{ characteristic.name }}
    auto tmp{{ characteristic.name }} = pService_->createCharacteristic("{{ characteristic.uuid }}",
                  BLECharacteristic::PROPERTY_READ   |
                  BLECharacteristic::PROPERTY_WRITE  |
                  BLECharacteristic::PROPERTY_NOTIFY |
                  BLECharacteristic::PROPERTY_INDICATE
                  );
    pCharacteristic{{ characteristic.name }}_.reset(tmp{{ characteristic.name }});
    pCharacteristic{{ characteristic.name }}_->addDescriptor(pBLE2902_.get());
    {% endfor %}
    // Set receive delegate
    {%- for characteristic in characteristics_conf -%}
    {%- if characteristic.direction=='CtoP' or characteristic.direction=='BIDI' %}
    cbRecv{{ characteristic.name }}_.setFunc([this](std::string msg) {
        {%- if characteristic.args.type=='std::string' %}
        delegate_->onRecv{{ characteristic.name }}(msg);
        {%- else %}
        {{ characteristic.args.type }}* buff = ({{ characteristic.args.type }}*)msg.c_str();
        delegate_->onRecv{{ characteristic.name }}({%- for arg_name in characteristic.args.names -%}
        buff[{{ loop.index-1 }}]{% if not loop.last %}, {% endif %}{% endfor %});
        {%- endif %}
    });
    pCharacteristic{{ characteristic.name }}_->setCallbacks(&cbRecv{{ characteristic.name }}_);
    {%- endif %}
    {%- endfor %}
}
{########################################################
        Stub send functions    sendFoo(typename var)
#########################################################}
{% for characteristic in characteristics_conf -%}
{% if characteristic.direction=='PtoC' or characteristic.direction=='BIDI' %}
void BLEService{{ service_conf.name }}::send{% include 'template/peripheral/c_stub_func.jinja' %} {
    {% if characteristic.args.type=='std::string' %}
    pCharacteristic{{ characteristic.name }}_->setValue({{ characteristic.args.names[0] }});
    {% else %}
    {{ characteristic.args.type }} buff[{{ characteristic.args.names | length }}];
    {% for arg_name in characteristic.args.names -%}
    buff[{{ loop.index-1 }}] = {{ arg_name }};
    {% endfor %}
    pCharacteristic{{ characteristic.name }}_->setValue((uint8_t*)buff, {{ characteristic.args.names | length * characteristic.args.size }});
    {% endif -%}
    pCharacteristic{{ characteristic.name }}_->notify();
}
{%- endif %}
{%- endfor %}
{########################################################
        setDelegate(BLEServiceDelegate* delegate)
#########################################################}
void BLEService{{ service_conf.name }}::setDelegate(BLEService{{ service_conf.name }}Delegate* delegate) {
    delegate_.reset(delegate);
}
{########################################################
        startService()
#########################################################}
void BLEService{{ service_conf.name }}::startService() {
    // Start the service
    pService_->start();

    // Start advertising
    BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
    pAdvertising->addServiceUUID(pService_->getUUID());
    pAdvertising->setScanResponse(false);
    pAdvertising->setMinPreferred(0x0);  // set value to 0x00 to not advertise this parameter
    BLEDevice::startAdvertising();
}
